// Import the necessary function from Redux Toolkit to create a slice of the store.
import { createSlice } from '@reduxjs/toolkit';

// Define the initial state of the notification slice.
const initialState = {
  notifications: [], // Array to hold notification objects.
  unreadCount: 0, // Counter for unread notifications.
  loading: false, // Boolean indicating if notifications are being fetched.
  error: null, // Holds any error messages from failed actions.
};

// Create a slice for notifications, defining state, reducers, and actions.
const notificationSlice = createSlice({
  name: 'notifications', // Name of the slice.
  initialState, // The initial state for the slice.
  reducers: {
    // Reducer to start fetching notifications. Sets loading state and clears any errors.
    fetchNotificationsStart: (state) => {
      state.loading = true;
      state.error = null;
    },

    // Reducer for successfully fetching notifications. Updates the notifications array,
    // calculates the unread count, and sets loading to false.
    fetchNotificationsSuccess: (state, action) => {
      state.notifications = action.payload;
      state.unreadCount = action.payload.filter(n => !n.read).length;
      state.loading = false;
    },

    // Reducer for failed fetch attempts. Stores the error message and stops loading.
    fetchNotificationsFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },

    // Reducer to add a new notification. Increases the unread count if the notification is unread.
    addNotification: (state, action) => {
      state.notifications.unshift(action.payload);
      if (!action.payload.read) {
        state.unreadCount += 1;
      }
    },

    // Reducer to mark a specific notification as read. Updates the unread count.
    markAsRead: (state, action) => {
      const notification = state.notifications.find(n => n.id === action.payload);
      if (notification && !notification.read) {
        notification.read = true;
        state.unreadCount -= 1;
      }
    },

    // Reducer to mark all notifications as read. Resets the unread count.
    markAllAsRead: (state) => {
      state.notifications.forEach(n => {
        if (!n.read) {
          n.read = true;
        }
      });
      state.unreadCount = 0;
    },

    // Reducer to delete a specific notification. Recalculates the unread count.
    deleteNotification: (state, action) => {
      state.notifications = state.notifications.filter(n => n.id !== action.payload);
      state.unreadCount = state.notifications.filter(n => !n.read).length;
    },

    // Reducer to clear all notifications. Also resets the unread count.
    clearAllNotifications: (state) => {
      state.notifications = [];
      state.unreadCount = 0;
    }
  }
});

// Export the action creators generated by createSlice.
export const {
  fetchNotificationsStart,
  fetchNotificationsSuccess,
  fetchNotificationsFailure,
  addNotification,
  markAsRead,
  markAllAsRead,
  deleteNotification,
  clearAllNotifications
} = notificationSlice.actions;

// Export the reducer to include it in the store configuration.
export default notificationSlice.reducer;
